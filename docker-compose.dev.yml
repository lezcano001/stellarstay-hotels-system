services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - pg-network
  node_app:
    build: .
    container_name: node_app
    depends_on:
      postgres:
        condition: service_healthy
      loki:
        condition: service_healthy
    environment:
      NODE_ENV: development
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
      POSTGRES_DB: appdb
      DB_HOST: postgres
      APP_PORT: 3000
      DB_PORT: 5432
      LOKI_URL: http://loki:3100
    ports:
      - "3000:3000"
    networks:
      - pg-network
      - monitoring
    restart: unless-stopped
    command: ["npm", "run", "start"]
  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s    
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - monitoring

volumes:
  postgres_data:

networks:
  pg-network:
    driver: bridge
  monitoring:
    driver: bridge